{"mappings":"gfAAAA,EAAA,S","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// const refs = {\n//   inputDelay: document.querySelector('[name=\"delay\"]'),\n//   inputStep: document.querySelector('[name=\"step\"]'),\n//   inputAmount: document.querySelector('[name=\"amount\"]'),\n//   btnSubmit: document.querySelector('button'),\n//   form: document.querySelector('form')\n// }\n\n// let delayByUser = parseInt(refs.inputDelay.value);\n// const stepByUser = parseInt(refs.inputAmount.value);\n// const amountByUser = parseInt(refs.inputStep.value);\n\n\n// refs.form.addEventListener('submit', (event) => {\n//   event.preventDefault();\n//   if (delayByUser < 0 && stepByUser < 0 && amountByUser < 0) {\n//     return\n//   };\n  \n//   for (position = 1, position <= amountByUser, position += 1) {\n  \n//   createPromise(position, delayByUser)\n//   .then(value => {\n//      Notiflix.Notify.success(value);\n//   })\n//   .catch(error => {\n//      Notiflix.Notify.warning(error);\n//   });\n//   delayByUser += stepByUser;\n//   };\n// });\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     } else {\n//       reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//     }\n//   }, delay);\n// }\n"],"names":["parcelRequire"],"version":3,"file":"03-promises.54bc93de.js.map"}